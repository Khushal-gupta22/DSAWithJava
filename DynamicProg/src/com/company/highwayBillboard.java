package com.company;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Scanner;

public class highwayBillboard {
    //you are given no of miles and no of boards .. further you are given on which mile you can put which board and the revenue generated by the respective board . you have to tell the max even that can be generated
    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        int miles = scn.nextInt();
        int noOfBoards = scn.nextInt();

        int[] arr = new int[noOfBoards];
        for (int i = 0; i < noOfBoards; i++) {
            arr[i] = scn.nextInt();
        }

        int[] revenue = new int[noOfBoards];
        for (int i = 0; i < noOfBoards; i++) {
            revenue[i] = scn.nextInt();
        }

        int gap = scn.nextInt();
    }

    // o(n^2) complexity where n is no of boards
    // int[] arr is where the boards are placed
    public static int solution(int noOfBoards, int[] arr, int[] revenue, int gap) {
        int[] dp = new int[arr.length];
        int ans = 0;
        dp[0] = revenue[0];
        for (int i = 0; i < arr.length; i++) {
            int max = 0;

            for (int j = 0; j < i; j++) {
                int distance = arr[i] - arr[j] ;
                if ( distance > gap) {
                    max = Math.max(max, dp[j]);
                }
            }
            dp[i] = max + revenue[i];
            ans = Math.max(ans, dp[i]);
        }

        return ans;
    }

    public static int solution2(int noOfMiles, int[] arr, int[] revenue, int gap) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < arr.length; i++) {
            map.put(arr[i], revenue[i]);
        }

        int[] dp = new int[noOfMiles+1];
        dp[0] = 0;
        for (int i = 0; i <= noOfMiles; i++) {
            if (map.containsKey(i) == false) {
                dp[i] = dp[i-1];
            } else {
                int boardNotInstalled = dp[i-1];
                int boardInstalled = map.get(i);
                if ( i > gap+1) {
                    boardInstalled += dp[i-gap-1];
                }
                dp[i] = Math.max(boardInstalled, boardNotInstalled);
            }
        }
        return dp[noOfMiles];
    }
}
